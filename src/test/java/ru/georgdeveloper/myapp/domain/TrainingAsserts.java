package ru.georgdeveloper.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TrainingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrainingAllPropertiesEquals(Training expected, Training actual) {
        assertTrainingAutoGeneratedPropertiesEquals(expected, actual);
        assertTrainingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrainingAllUpdatablePropertiesEquals(Training expected, Training actual) {
        assertTrainingUpdatableFieldsEquals(expected, actual);
        assertTrainingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrainingAutoGeneratedPropertiesEquals(Training expected, Training actual) {
        assertThat(actual)
            .as("Verify Training auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrainingUpdatableFieldsEquals(Training expected, Training actual) {
        assertThat(actual)
            .as("Verify Training relevant properties")
            .satisfies(a -> assertThat(a.getTrainingName()).as("check trainingName").isEqualTo(expected.getTrainingName()))
            .satisfies(a -> assertThat(a.getLastTrainingDate()).as("check lastTrainingDate").isEqualTo(expected.getLastTrainingDate()))
            .satisfies(a -> assertThat(a.getValidityPeriod()).as("check validityPeriod").isEqualTo(expected.getValidityPeriod()))
            .satisfies(a -> assertThat(a.getNextTrainingDate()).as("check nextTrainingDate").isEqualTo(expected.getNextTrainingDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrainingUpdatableRelationshipsEquals(Training expected, Training actual) {
        assertThat(actual)
            .as("Verify Training relationships")
            .satisfies(a -> assertThat(a.getEmployee()).as("check employee").isEqualTo(expected.getEmployee()));
    }
}
