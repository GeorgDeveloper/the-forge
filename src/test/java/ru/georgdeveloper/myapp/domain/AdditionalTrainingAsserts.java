package ru.georgdeveloper.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AdditionalTrainingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdditionalTrainingAllPropertiesEquals(AdditionalTraining expected, AdditionalTraining actual) {
        assertAdditionalTrainingAutoGeneratedPropertiesEquals(expected, actual);
        assertAdditionalTrainingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdditionalTrainingAllUpdatablePropertiesEquals(AdditionalTraining expected, AdditionalTraining actual) {
        assertAdditionalTrainingUpdatableFieldsEquals(expected, actual);
        assertAdditionalTrainingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdditionalTrainingAutoGeneratedPropertiesEquals(AdditionalTraining expected, AdditionalTraining actual) {
        assertThat(actual)
            .as("Verify AdditionalTraining auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdditionalTrainingUpdatableFieldsEquals(AdditionalTraining expected, AdditionalTraining actual) {
        assertThat(actual)
            .as("Verify AdditionalTraining relevant properties")
            .satisfies(a -> assertThat(a.getTrainingName()).as("check trainingName").isEqualTo(expected.getTrainingName()))
            .satisfies(a -> assertThat(a.getTrainingDate()).as("check trainingDate").isEqualTo(expected.getTrainingDate()))
            .satisfies(a -> assertThat(a.getValidityPeriod()).as("check validityPeriod").isEqualTo(expected.getValidityPeriod()))
            .satisfies(a -> assertThat(a.getNextTrainingDate()).as("check nextTrainingDate").isEqualTo(expected.getNextTrainingDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdditionalTrainingUpdatableRelationshipsEquals(AdditionalTraining expected, AdditionalTraining actual) {
        assertThat(actual)
            .as("Verify AdditionalTraining relationships")
            .satisfies(a -> assertThat(a.getProfession()).as("check profession").isEqualTo(expected.getProfession()));
    }
}
